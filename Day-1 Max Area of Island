Max Area of Island

You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.


Solution:
C++:

class Solution {
public:
    bool isSafe(int i,int j,int m,int n){
        if(i < 0 || j < 0 || i>=m || j >= n) return true;
        else return false;
    }
    
    void mark(vector<vector<int>> &g, int &i, int &j, int &ans)
	{
		if(isSafe(i,j,g.size(),g[0].size()) || g[i][j]==0 || g[i][j] == 2) return;
		g[i][j] = 2;
		++ans;
		mark(g,++i,j,ans);
        mark(g,--i,++j,ans);
        mark(g,--i,--j,ans);
        mark(g,++i,--j,ans);
        ++j;
	}
    
	int maxAreaOfIsland(vector<vector<int>>& grid)
	{
		int maxAns = 0;
		for(int i = 0; i < grid.size(); ++i)
			for(int j = 0; j<grid[i].size(); ++j) 
				if(grid[i][j] == 1){
                    int a=0;
                    mark(grid,i,j,a);
                    maxAns=max(maxAns,a);
                }        
		return maxAns;    
	}
};
